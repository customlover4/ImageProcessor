services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    container_name: postgres
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: qqq
      POSTGRES_DB: test
      PGDATA: /var/lib/postgresql/data/pgdata
      POSGTRES_INITDB_ARGS: --encoding=UTF-8 --locale=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d test"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_KRAFT_CLUSTER_ID=LKSJGdfklhusrtl  # ← ОБЯЗАТЕЛЬНО!
    volumes:
      - kafka_:/bitnami/kafka
    command: |
      bash -c "
        /opt/bitnami/scripts/kafka/run.sh &
        echo 'Ждём запуска Kafka...'
        sleep 15
        echo 'Создаём топики...'
        kafka-topics.sh --create --topic pictures --partitions 1 --replication-factor 1 --bootstrap-server localhost:9092
        echo 'Топики созданы. Kafka готова.'
        wait
      "
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list | grep -q pictures"]
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 20s
    networks:
      - app-network

  app:
    build:
      context: ../app
      dockerfile: ../app/dockerfile.prod
    ports:
      - "80:8080"
    environment:
      - DEBUG=false
      - PORT=8080
      - POSTGRES_CONN=postgresql://dev:qqq@postgres:5432/test?sslmode=disable
      - CONFIG_PATH=../config/config.yml
      - TEMPLATES=templates/*.html
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=pictures
      - KAFKA_GROUP_ID=my-group
    volumes:
      - ../config:/config
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy 
    networks:
      - app-network

volumes:
  postgres_data:
  kafka_:

networks:
  app-network:
    driver: bridge
